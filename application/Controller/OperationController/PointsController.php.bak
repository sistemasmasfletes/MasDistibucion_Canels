<?php
use com\masfletes\db\DBUtil;

class OperationController_PointsController extends JController {

    const AUTHORIZED_ADDRESS_CODE = 1;
    const ROL_ADMIN_CODE = 1;

    public function init() {
        parent::init();
        if (!Model3_Auth::isAuth())
            $this->createResponse401();
    }

    public function indexAction() {
        
    }

    public function getPointsAction() {
        error_log("ENTRA A LOS PUNTOS DE VENTAS");
        $params = $this->getRequest()->getPostJson();
        $page = $this->getArrayValue('page', $params);
        $rowsPerPage = $this->getArrayValue('rowsPerPage', $params);
        $sortField = $this->getArrayValue('sortField', $params);
        $sortDir = $this->getArrayValue('sortDir', $params);
        $filter = $this->getArrayValue('filter', $params);
        $sidx = $this->getArrayValue('sortField', $params);
        
        if (!$sidx)
            $sidx = 1;
        
        try{
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');
            
            $em = $this->getEntityManager('DefaultDb');
            $pointsRepo = $em->getRepository('DefaultDb_Entities_Point');
            $points = $pointsRepo->getPointsListDQL($page, $rowsPerPage, $sortField, $sortDir, $sidx);

            echo json_encode($points);
        } catch (Exception $ex) {
            $params = compact('page', 'rowsPerPage', 'sortField', 'sortDir', 'sidx');
            $this->logAndResolveException($ex, $params);
        }
    }
    
    public function getPointByIdAction(){
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);
        
        try{
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');
            
            $em = $this->getEntityManager('DefaultDb');
            $pointIdRepo = $em->getRepository('DefaultDb_Entities_Point');
            $pointId = $pointIdRepo->getPointByIdDQL($id);
            
            echo json_encode($pointId);
        }  catch (Exception $e){
            $params = compact('id');
            $this->logAndResolveException($e, $params);
        }
    }

    public function saveAction(){
        $params = $this->getRequest()->getPostJson();
        
        $id = $this->getArrayValue('id', $params);
        $code = $this->getArrayValue('code', $params);
        $name = $this->getArrayValue('name', $params);
        $type = $this->getArrayValue('type', $params);
        $status = $this->getArrayValue('status', $params);
        $controller = $this->getArrayValue('controller', $params);
        $openingTime = $this->getArrayValue('opening_time', $params);
        $closingTime = $this->getArrayValue('closing_time', $params);
        $comments = $this->getArrayValue('comments', $params);
        $deleted = $this->getArrayValue('deleted', $params);
        $webpage = $this->getArrayValue('webpage', $params);
        $categoryId = $this->getArrayValue('categoryId_id', $params);
        $address = $this->getArrayValue('address_id', $params);
        $extNumber = $this->getArrayValue('extNumber', $params);
        $intNumber = $this->getArrayValue('intNumber', $params);
        $urlGoogleMaps = $this->getArrayValue('urlGoogleMaps', $params);
        $zipcode = $this->getArrayValue('zipcode', $params);
        $neighborhood = $this->getArrayValue('neighborhood', $params);
        $countryid = $this->getArrayValue('country_id', $params);
        $stateid = $this->getArrayValue('state_id', $params);
        $cityid = $this->getArrayValue('city_id', $params);
        
        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', ($id == null) ? 'agregar' : 'editar');

            $em = $this->getEntityManager('DefaultDb');
            $pointsRepo = $em->getRepository('DefaultDb_Entities_Point');
            
            $points = $pointsRepo->save(
                    $id,
                    $code,
                    $name,
                    $type,
                    $status,
                    $controller,
                    $openingTime,
                    $closingTime,
                    $comments,
                    $deleted,
                    $webpage,
                    $categoryId,
                    $address,
                    $extNumber,
                    $intNumber,
                    $urlGoogleMaps,
					$zipcode,
					$neighborhood,
					$countryid,
					$stateid,
					$cityid);
            
            echo json_encode($points);
        } catch (Exception $ex) {
            $params = compact('id','code','name','type','status', 'address_id', 'categoryId_id',
                    'opening_time','opening_time','webpage','comments','deleted','extNumber','intNumber','urlGoogleMaps');
            $this->logAndResolveException($ex, $params);
        }
    }

    public function deleteAction() {
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);
        $deleted = 0;
        
        try{
            $this->hasPermission($this->getUserSessionId(), 'rutas', ($id==null) ? 'agregar' : 'editar');
            
            $em = $this->getEntityManager('DefaultDb');
            $pointsRepo = $em->getRepository('DefaultDb_Entities_Point');

            $points = $pointsRepo->delete($id, $deleted);

            echo json_encode($points);
        }  catch (Exception $e){
            $params = compact('id','deleted');
            $this->logAndResolveException($e, $params);
        }      
     }
    
    public function getPointByNameAction() {
        $params = $this->getRequest()->getPostJson();
        $pointName = $this->getArrayValue('param1', $params);

        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');
            $conn = $this->getConnection();
            $parameters = array($pointName, $this->currentUserId);
            $resultsets = DBUtil::executeStoredProc($conn, 'sp_getPointByName', $parameters, PDO::FETCH_NAMED);
            unset($conn);

            echo json_encode($resultsets);
        } catch (Exception $ex) {
            $params = compact('pointName');
            $this->logAndResolveException($ex, $params);
        }
    }
    
    public function generatePDFAction(){
        include '../library/phpqrcode/phpqrcode.php';
        try {
            $PNG_TEMP_DIR = dirname('..\public\images') . DIRECTORY_SEPARATOR . 'qrcode' . DIRECTORY_SEPARATOR;
            $PNG_WEB_DIR = '../public/qrcode/'; //html PNG location prefix
            if (!file_exists($PNG_TEMP_DIR)){
                mkdir($PNG_TEMP_DIR);
            }
            
            $params = $this->getRequest()->getPostJson();
            $id = $this->getArrayValue('id', $params);

            $em = $this->getEntityManager('DefaultDb');
            $pointsRepo = $em->getRepository('DefaultDb_Entities_Point');
            $codePoint = $pointsRepo->getCodePointListDQL($id);

            $arrCode =  array();
            foreach ($codePoint as $code){
                $arrCode = array(
                    "code"=>$code["code"]
                );
            }
            
            $pointCode = $code["code"];
            error_log("PNG_TEMP_DIR ->".$PNG_TEMP_DIR);
            error_log("pointCode ->".$pointCode);
            $filename = $PNG_TEMP_DIR . $pointCode . '.png';
            $errorCorrectionLevel = 'M';
            $matrixPointSize = 10;

            QRcode::png($pointCode, $filename, $errorCorrectionLevel, $matrixPointSize, 2);
        } catch (Exception $e) {
            echo $e->getMessage();
        }    
    }
    
    public function getAddressAction(){
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);
        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');
            
            $em = $this->getEntityManager('DefaultDb');

            $whereZones = "";

            // Obtener todas las zonas del usuario
            // Si no es administrador, se filtran las direcciones por zonas asignadas al usuario
            if ($_SESSION['__M3']['MasDistribucion']['Credentials']['role'] != self::ROL_ADMIN_CODE) {
                $dqlz = $em->createQueryBuilder();
                $dqlz->select('z')
                        ->from('DefaultDb_Entities_UserZone', 'z')->where('z.user = ' . $this->currentUserId . '');
                $query = $em->createQuery($dqlz);
                $zonas = $query->getResult();

                $numZonas = count($zonas);
                $counter = 0;


                $whereZones .= " (";
                foreach ($zonas as $zona) {
                    $counter += 1;
                    $zoneId = $zona->getZone()->getId();

                    if ($counter == $numZonas) {
                        $whereZones .= ' a.zoneId = ' . $zoneId . ' OR a.zoneId is null ';
                    } else {
                        $whereZones .= ' a.zoneId = ' . $zoneId . ' OR ';
                    }
                }
                $whereZones .= ')';
            }

//            print_r($whereZones);
            $dql = $em->createQueryBuilder();
            $dql->select('a')
                    ->from('DefaultDb_Entities_Address', 'a')
                    ->where('a.city=' . $id)
                    ->andWhere($whereZones)
                    ->andWhere('a.authorized=' . self::AUTHORIZED_ADDRESS_CODE);

            $query = $em->createQuery($dql);

            $addresses = $query->getResult();

            $arrAddress = array();
            foreach ($addresses as $address){
                $arrAddress[] = array(
                    "id"=>$address->getId(),
                	/*"address"=>$address->getAddress() . "  , " . $address->getNeighborhood() . ", " .$address->getZipcode()*/                	"address"=>$address->getAddress()
                );
            }
            
            echo json_encode($arrAddress);
        } catch (Exception $ex) {
            $params = array();
            $this->logAndResolveException($ex, $params);
        }
    }

    public function getContactAction() {
        $params = $this->getRequest()->getPostJson();
        $page = $this->getArrayValue('page', $params);
        $rowsPerPage = $this->getArrayValue('rowsPerPage', $params);
        $sortField = $this->getArrayValue('sortField', $params);
        $sortDir = $this->getArrayValue('sortDir', $params);
        $filter = $this->getArrayValue('filter', $params);
        $id = $this->getArrayValue('pointId', $params);
        $sidx = $this->getArrayValue('sortField', $params);

        if (!$sidx)
            $sidx = 1;

        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');

            $em = $this->getEntityManager('DefaultDb');
            $contactRepo = $em->getRepository('DefaultDb_Entities_Contact');
            $contact = $contactRepo->getContactListDQL($page, $rowsPerPage, $sortField, $sortDir, $id);

            echo json_encode($contact);
        } catch (Exception $e) {
            $params = compact('page', 'rowsPerPage', 'sortField', 'sortDir', 'sidx', 'id');
            $this->logAndResolveException($e, $params);
        }
    }

    public function getContactByIdAction() {
        $params = $this->getRequest()->getPostJson();

        $page = $this->getArrayValue('page', $params);
        $rowsPerPage = $this->getArrayValue('rowsPerPage', $params);
        $sortField = $this->getArrayValue('sortField', $params);
        $sortDir = $this->getArrayValue('sortDir', $params);
        $filter = $this->getArrayValue('filter', $params);
        $contactId = $this->getArrayValue('id', $params);

        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');

            $em = $this->getEntityManager('DefaultDb');
            $contactIdRepo = $em->getRepository('DefaultDb_Entities_Contact');
            $contact = $contactIdRepo->getContactByIdListDQL($page, $rowsPerPage, $sortField, $sortDir, $contactId);

            echo json_encode($contact);
        } catch (Exception $ex) {
            $params = compact('page', 'rowsPerPage', 'sortField', 'sortDir', 'sidx', 'id');
            $this->logAndResolveException($ex, $params);
        }
    }

    public function saveContactAction() {
        $params = $this->getRequest()->getPostJson();

        $id = $this->getArrayValue('id', $params);
        $pointId = $this->getArrayValue('point_id', $params);
        $name = $this->getArrayValue('name', $params);
        $job = $this->getArrayValue('job', $params);
        $email = $this->getArrayValue('email', $params);
        $phoneNumber = $this->getArrayValue('phone_number', $params);
        $status = $this->getArrayValue('status', $params);

        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', ($id == null) ? 'agregar' : 'editar');

            $em = $this->getEntityManager('DefaultDb');
            $contactRepo = $em->getRepository('DefaultDb_Entities_Contact');
            $contact = $contactRepo->saveContact($id, $pointId, $name, $job, $email, $phoneNumber, $status);

            echo json_encode($contact);
        } catch (Exception $ex) {
            
        }
    }

    public function deleteContactAction() {
        $params = $this->getRequest()->getPostJson();

        $id = $this->getArrayValue('id', $params);
        $em = $this->getEntityManager('DefaultDb');
        $contactRepo = $em->getRepository('DefaultDb_Entities_Contact');
        $contact = $contactRepo->delete($id);

        echo json_encode($contact);
    }

    public function getClassificationByIdAction() {
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);

        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'listar');

            $em = $this->getEntityManager('DefaultDb');
            $classIdRepo = $em->getRepository('DefaultDb_Entities_Classification');
            $classId = $classIdRepo->getClassificationByIdListDQL($id);

            echo json_encode($classId);
        } catch (Exception $e) {
            $params = compact('id');
            $this->logAndResolveException($e, $params);
        }
    }

    public function saveClasifficationAction() {
        $params = $this->getRequest()->getPostJson();

        $id = $this->getArrayValue('id', $params);
        $size = $this->getArrayValue('size', $params);
        $activity = $this->getArrayValue('activity', $params);
        $consumption = $this->getArrayValue('consumption', $params);
        $idPoint = $this->getArrayValue('pointId', $params);

        try {

            $em = $this->getEntityManager('DefaultDb');
            $classificationRepo = $em->getRepository('DefaultDb_Entities_Classification');
            $classification = $classificationRepo->saveClasiffication($id, $size, $activity, $consumption, $idPoint);

            echo json_encode($classification);
        } catch (Exception $ex) {
            $params = compact('id', 'size', 'activity', 'consumption', 'idPoint');
            $this->logAndResolveException($ex, $params);
        }
    }
    
    public function getCountryAction(){
        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'LISTAR');
            
            $em = $this->getEntityManager('DefaultDb');
            $dql = $em->createQueryBuilder();
            $dql->select('p')
                ->from('DefaultDb_Entities_Paises', 'p');
            
            $query = $em->createQuery($dql);
            $countries = $query->getResult();
            
            $arrCountry = array();
            foreach ($countries as $country){
                $arrCountry[] = array(
                    "id"=>$country->getId(),
                    "name"=>$country->getNombre());
            }
            
            echo json_encode($arrCountry);
        } catch (Exception $ex){
            $params = array();
            $this->logAndResolveException($ex, $params);
        }
    }
    
    public function getStateAction(){
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);
        var_dump($id);
        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'LISTAR');
            
            $em = $this->getEntityManager('DefaultDb');
            $dql = $em->createQueryBuilder();
            $dql->select('s')
                ->from('DefaultDb_Entities_State', 's')
                ->where('s.country ='.$id);
            
            $query = $em->createQuery($dql);
            $states = $query->getResult();
            
            $arrStates = array();
            foreach ($states as $state){
                $arrStates[] = array(
                    "id"=>$state->getId(),
                    "name"=>$state->getName());
            }
            
            echo json_encode($arrStates);
        } catch (Exception $ex){
            $params = array();
            $this->logAndResolveException($ex, $params);
        }
    }
    
    public function getCityAction(){
        $params = $this->getRequest()->getPostJson();
        $id = $this->getArrayValue('id', $params);
        try {
            $this->hasPermission($this->getUserSessionId(), 'rutas', 'LISTAR');
            
            $em = $this->getEntityManager('DefaultDb');
            $dql = $em->createQueryBuilder();
            $dql->select('c')
                ->from('DefaultDb_Entities_City', 'c')
                ->where('c.state ='.$id);
            
            $query = $em->createQuery($dql);
            $cities = $query->getResult();
            
            $arrCities = array();
            foreach ($cities as $city){
                $arrCities[] = array(
                    "id"=>$city->getId(),
                    "name"=>$city->getName());
            }
            
            echo json_encode($arrCities);
        } catch (Exception $ex) {
            $params = array();
            $this->logAndResolveException($ex,$params);
        }
    }
}
