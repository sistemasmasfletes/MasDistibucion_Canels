<?php

namespace MasDistribucion\DefaultDb\Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultDb_Entities_Schedule extends \DefaultDb_Entities_Schedule implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setScheduleParent($parent)
    {
        $this->__load();
        return parent::setScheduleParent($parent);
    }

    public function getScheduleParent()
    {
        $this->__load();
        return parent::getScheduleParent();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getRoute()
    {
        $this->__load();
        return parent::getRoute();
    }

    public function getVehicle()
    {
        $this->__load();
        return parent::getVehicle();
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function getStartDate()
    {
        $this->__load();
        return parent::getStartDate();
    }

    public function getEndDate()
    {
        $this->__load();
        return parent::getEndDate();
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getMonday()
    {
        $this->__load();
        return parent::getMonday();
    }

    public function getTuesday()
    {
        $this->__load();
        return parent::getTuesday();
    }

    public function getWednesday()
    {
        $this->__load();
        return parent::getWednesday();
    }

    public function getThursday()
    {
        $this->__load();
        return parent::getThursday();
    }

    public function getFriday()
    {
        $this->__load();
        return parent::getFriday();
    }

    public function getSaturday()
    {
        $this->__load();
        return parent::getSaturday();
    }

    public function getSunday()
    {
        $this->__load();
        return parent::getSunday();
    }

    public function getRecurrent()
    {
        $this->__load();
        return parent::getRecurrent();
    }

    public function getWeek()
    {
        $this->__load();
        return parent::getWeek();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function setRoute($route)
    {
        $this->__load();
        return parent::setRoute($route);
    }

    public function setVehicle($vehicle)
    {
        $this->__load();
        return parent::setVehicle($vehicle);
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function setStartDate($startDate)
    {
        $this->__load();
        return parent::setStartDate($startDate);
    }

    public function setEndDate($endDate)
    {
        $this->__load();
        return parent::setEndDate($endDate);
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function setMonday($monday)
    {
        $this->__load();
        return parent::setMonday($monday);
    }

    public function setTuesday($tuesday)
    {
        $this->__load();
        return parent::setTuesday($tuesday);
    }

    public function setWednesday($wednesday)
    {
        $this->__load();
        return parent::setWednesday($wednesday);
    }

    public function setThursday($thursday)
    {
        $this->__load();
        return parent::setThursday($thursday);
    }

    public function setFriday($friday)
    {
        $this->__load();
        return parent::setFriday($friday);
    }

    public function setSaturday($saturday)
    {
        $this->__load();
        return parent::setSaturday($saturday);
    }

    public function setSunday($sunday)
    {
        $this->__load();
        return parent::setSunday($sunday);
    }

    public function setRecurrent($recurrent)
    {
        $this->__load();
        return parent::setRecurrent($recurrent);
    }

    public function setWeek($week)
    {
        $this->__load();
        return parent::setWeek($week);
    }

    public function getStartDateRecurrent($date = NULL)
    {
        $this->__load();
        return parent::getStartDateRecurrent($date);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'startDate', 'endDate', 'status', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'recurrent', 'week', 'route', 'vehicle', 'user', 'scheduleParent');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}