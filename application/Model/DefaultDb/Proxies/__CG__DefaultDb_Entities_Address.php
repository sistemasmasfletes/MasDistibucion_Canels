<?php

namespace MasDistribucion\DefaultDb\Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DefaultDb_Entities_Address extends \DefaultDb_Entities_Address implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getCountry()
    {
        $this->__load();
        return parent::getCountry();
    }

    public function getState()
    {
        $this->__load();
        return parent::getState();
    }

    public function getCity()
    {
        $this->__load();
        return parent::getCity();
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function getNeighborhood()
    {
        $this->__load();
        return parent::getNeighborhood();
    }

    public function getZipcode()
    {
        $this->__load();
        return parent::getZipcode();
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function getAuthorized()
    {
        $this->__load();
        return parent::getAuthorized();
    }

    public function getZoneId()
    {
        $this->__load();
        return parent::getZoneId();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function setCountry($country)
    {
        $this->__load();
        return parent::setCountry($country);
    }

    public function setState($state)
    {
        $this->__load();
        return parent::setState($state);
    }

    public function setCity($city)
    {
        $this->__load();
        return parent::setCity($city);
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function setNeighborhood($neighborhood)
    {
        $this->__load();
        return parent::setNeighborhood($neighborhood);
    }

    public function setZipcode($zipcode)
    {
        $this->__load();
        return parent::setZipcode($zipcode);
    }

    public function setAuthorized($authorized)
    {
        $this->__load();
        return parent::setAuthorized($authorized);
    }

    public function setZoneId($zone)
    {
        $this->__load();
        return parent::setZoneId($zone);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'address', 'neighborhood', 'zipcode', 'authorized', 'zoneId', 'city', 'state', 'country', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}